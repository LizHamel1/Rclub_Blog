[
  {
    "path": "posts/welcome/",
    "title": "Welcome to Rclub Blog",
    "description": "Welcome to the Rclub Blog.",
    "author": [
      {
        "name": "Vince Ramirez",
        "url": {}
      }
    ],
    "date": "2021-11-06",
    "categories": [],
    "contents": "\nIntroducing the R club Blog! A space for us to share everything R!\n\n\n\n",
    "preview": {},
    "last_modified": "2021-11-06T22:27:49-07:00",
    "input_file": "welcome.knit.md"
  },
  {
    "path": "posts/Writing Function R Club October 11/",
    "title": "R Club - Writing Functions",
    "description": "R Club",
    "author": [],
    "date": "2021-11-06",
    "categories": [],
    "contents": "\nIntroduction\nWords from our sponsors\n\n“Writing good functions is a lifetime journey. Even after using R for many years I still learn new techniques and better ways of approaching old problems.” -Hadley Wickham\n\nOne of the best ways to improve your reach as a data scientist is to write functions. Functions allow you to automate common tasks in a more powerful and general way than copy-and-pasting. Writing a function has three big advantages over using copy-and-paste:\nYou can give a function an evocative name that makes your code easier to understand.\nAs requirements change, you only need to update code in one place, instead of many.\nYou eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but not in another).\nOther material\nSource Material for Functions\nhttps://r4ds.had.co.nz/functions.html ## Source Material on Purrr https://dcl-prog.stanford.edu/purrr-parallel.html ## More on Purrr https://r4ds.had.co.nz/iteration.html#the-map-functions ## Purrr Cheatsheat https://github.com/rstudio/cheatsheets/blob/master/purrr.pdf\nCode\nPackages / Functions\n\n\nknitr::opts_chunk$set(echo = TRUE)\n\n# R Version \nR.Version()$version.string #code ran on R version 4.0.5 (2021-03-31)\n\n\n[1] \"R version 4.1.0 (2021-05-18)\"\n\n# Load packages\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(magrittr, scales, tidyverse)\n\nget_data <- function(){\n  df <- tibble(\n  a = rnorm(10),\n  b = rnorm(10),\n  c = rnorm(10),\n  d = rnorm(10))\n  \n  return(df)\n}\n\n\n\nData Read\n\n\n# Create a table of 10 random number with a mean of zero (SD=1)\ndf <- tibble(\n  a = rnorm(10),\n  b = rnorm(10),\n  c = rnorm(10),\n  d = rnorm(10)\n)\n\ndf\n\n\n# A tibble: 10 x 4\n        a       b      c      d\n    <dbl>   <dbl>  <dbl>  <dbl>\n 1  0.973 -0.0730  0.823 -0.151\n 2  0.953 -0.282  -0.729  0.967\n 3  0.425  0.962  -0.611 -0.795\n 4  1.91   0.323  -0.194 -0.205\n 5 -0.741 -0.429  -0.370 -0.616\n 6 -0.245  0.269  -0.509 -0.110\n 7  1.42  -1.38   -0.407 -0.272\n 8  0.868  0.402  -0.148  0.156\n 9 -0.849  1.86    1.83  -1.25 \n10 -0.509  3.54    1.29  -0.378\n\nMaking a function\n\n\n# Rescale data to be between 0 and 1\ndf$a <- (df$a - min(df$a, na.rm = TRUE)) / \n  (max(df$a, na.rm = TRUE) - min(df$a, na.rm = TRUE))\ndf$b <- (df$b - min(df$b, na.rm = TRUE)) / \n  (max(df$b, na.rm = TRUE) - min(df$a, na.rm = TRUE)) #look a mistake!\ndf$c <- (df$c - min(df$c, na.rm = TRUE)) / \n  (max(df$c, na.rm = TRUE) - min(df$c, na.rm = TRUE))\ndf$d <- (df$d - min(df$d, na.rm = TRUE)) / \n  (max(df$d, na.rm = TRUE) - min(df$d, na.rm = TRUE))\n\ndf # look at column B for the mistake from paste/copy\n\n\n# A tibble: 10 x 4\n        a     b      c     d\n    <dbl> <dbl>  <dbl> <dbl>\n 1 0.660  0.369 0.607  0.495\n 2 0.653  0.310 0      1    \n 3 0.462  0.661 0.0463 0.204\n 4 1      0.481 0.209  0.471\n 5 0.0394 0.268 0.140  0.285\n 6 0.219  0.466 0.0861 0.513\n 7 0.822  0     0.126  0.440\n 8 0.622  0.503 0.227  0.633\n 9 0      0.916 1      0    \n10 0.123  1.39  0.789  0.392\n\n# Reload OG dataframe\ndf <- get_data()\n\n# Ask yourself: Am I repeating code? Am I copy-pasting stuff?\n  ## YES! What am I repeating?\n  df$a <- (df$a - min(df$a, na.rm = TRUE)) / \n  (max(df$a, na.rm = TRUE) - min(df$a, na.rm = TRUE))\n  \n  ## Reload OG dataframe\n  df <- get_data()\n\n  ## Rewrite the code using temporary variables with general names\n  x <- df$a\n  (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))\n\n\n [1] 0.3798973 0.6395313 0.3916441 0.6788337 0.0000000 0.4547929\n [7] 1.0000000 0.8133605 0.5359254 0.3890551\n\n# Ask yourself: Is there still duplication?\n  ## YES! What am I repeating? [in this case, it's the range]\n  rng <- range(x, na.rm = TRUE)\n  (x - rng[1]) / (rng[2] - rng[1])\n\n\n [1] 0.3798973 0.6395313 0.3916441 0.6788337 0.0000000 0.4547929\n [7] 1.0000000 0.8133605 0.5359254 0.3890551\n\n# Make the function\n  rescale01 <- function(x) {\n  rng <- range(x, na.rm = TRUE)\n  (x - rng[1]) / (rng[2] - rng[1])\n  }\n  \n  ## Check to make sure it works as expected\n  rescale01(c(0, 5, 10))\n\n\n[1] 0.0 0.5 1.0\n\n  ## Add to other customized functions and apply to dataframe\n  df$a <- rescale01(df$a)\n  df$b <- rescale01(df$b)\n  df$c <- rescale01(df$c)\n  df$d <- rescale01(df$d)\n\n\n\nThree things to making a function: 1. You need to pick a name for the function. Here I’ve used rescale01 because this function rescales a vector to lie between 0 and 1. + Function names should be verbs, and arguments should be nouns. + But if the function can be nouns if they represents known nouns (e.g. mean()) or properties of an object (e.g. coef()) + snake_case vs. camelCase - just be consistent + Avoid common function names as your local will have priority\nYou list the inputs, or arguments, to the function inside function. Here we have just one argument. If we had more the call would look like function(x, y, z).\nDefault value have a value set here. eg. rescale01(tmp, Finite = TRUE)\nThere are rules for some names: ++ x,y,z: vectors ++ df: dataframe ++ i,j: numberic indices (typically rows and columns respectively) ++ n: length, number of rows ++ p: number of columns\nYou place the code you have developed in body of the function, a { block that immediately follows function(…).\nstop() is useful to place in conditions if you only accept certain data; if(finite = FALSE){stop(“you can only have finite number here dude”)}\nreturn() another way to break out of a function and return a value\ninvisible() send an object, but don’t print it. Good for keeping things pipeable\nBetter functions\n\n\n# Reload OG dataframe\ndf <- get_data()\n\n# Make our rescale function even better - add default function argument and stop rule\nrescale01 <- function(x, finite=TRUE) {\n  # check for finite numbers in vector\n  if(finite == FALSE){\n    stop(\"you can only have finite number here dude!\")  \n  } \n  \n  #grab range (rng) to use min (rng[1]) and max (rng[2])\n  rng <- range(x, na.rm = TRUE)\n  (x - rng[1]) / (rng[2] - rng[1])\n  \n}\n\n# Call function with attribute\nrescale01(df$a, finite = TRUE)\n\n\n [1] 0.4496844 0.5073375 0.4230537 1.0000000 0.7514802 0.5768766\n [7] 0.3203819 0.0000000 0.3222939 0.2888145\n\n# Pipe Dream - never break the pipe\nshow_missings <- function(df) {\n  n <- sum(is.na(df))\n  cat(\"Missing values: \", n, \"\\n\", sep = \"\")\n  \n  invisible(df)\n}\n\nshow_missings(mtcars) \n\n\nMissing values: 0\n\nmtcars %>% \n  show_missings() %>% \n  mutate(mpg = ifelse(mpg < 20, NA, mpg)) %>% \n  show_missings() \n\n\nMissing values: 0\nMissing values: 18\n\npurrrFect functions\nFaster as they are written in C\nRun multiple columns within the pipe\n\n\n# What if I want to run all cols with a function?\ndf %>%\nmap(rescale01)\n\n\n\n$a\n [1] 0.4496844 0.5073375 0.4230537 1.0000000 0.7514802 0.5768766\n [7] 0.3203819 0.0000000 0.3222939 0.2888145\n\n$b\n [1] 0.2238090 0.1229223 0.0000000 0.5674141 0.2684266 0.3186047\n [7] 1.0000000 0.5474187 0.5649674 0.1791412\n\n$c\n [1] 1.0000000 0.0000000 0.5075496 0.2040886 0.3651896 0.1734424\n [7] 0.1896919 0.2876244 0.6463605 0.4859685\n\n$d\n [1] 0.09331861 0.36398592 0.32631510 0.14670286 0.48385989 0.70930657\n [7] 1.00000000 0.05151067 0.12948621 0.00000000\n\ndf %>%\n  map_dbl(mean)\n\n\n         a          b          c          d \n 0.6881837  0.1634370 -0.2770932 -0.1907347 \n\n# But what about spitting out a vector instead of a list?\ndf %>%\n  map(rescale01) %>% str()\n\n\nList of 4\n $ a: num [1:10] 0.45 0.507 0.423 1 0.751 ...\n $ b: num [1:10] 0.224 0.123 0 0.567 0.268 ...\n $ c: num [1:10] 1 0 0.508 0.204 0.365 ...\n $ d: num [1:10] 0.0933 0.364 0.3263 0.1467 0.4839 ...\n\ndf %>%\n  modify(rescale01)\n\n\n# A tibble: 10 x 4\n       a     b     c      d\n   <dbl> <dbl> <dbl>  <dbl>\n 1 0.450 0.224 1     0.0933\n 2 0.507 0.123 0     0.364 \n 3 0.423 0     0.508 0.326 \n 4 1     0.567 0.204 0.147 \n 5 0.751 0.268 0.365 0.484 \n 6 0.577 0.319 0.173 0.709 \n 7 0.320 1     0.190 1     \n 8 0     0.547 0.288 0.0515\n 9 0.322 0.565 0.646 0.129 \n10 0.289 0.179 0.486 0     \n\n# What if I want to run a few cols with function?\ndf %>%\n  modify_at(c(\"a\", \"b\"), rescale01)\n\n\n# A tibble: 10 x 4\n       a     b      c      d\n   <dbl> <dbl>  <dbl>  <dbl>\n 1 0.450 0.224  2.18  -0.739\n 2 0.507 0.123 -1.82  -0.113\n 3 0.423 0      0.210 -0.200\n 4 1     0.567 -1.01  -0.616\n 5 0.751 0.268 -0.360  0.164\n 6 0.577 0.319 -1.13   0.685\n 7 0.320 1     -1.06   1.36 \n 8 0     0.547 -0.671 -0.836\n 9 0.322 0.565  0.765 -0.655\n10 0.289 0.179  0.123 -0.955\n\ndf %>%\n  mutate_at(c(\"a\", \"b\"), ~ rescale01(.))\n\n\n# A tibble: 10 x 4\n       a     b      c      d\n   <dbl> <dbl>  <dbl>  <dbl>\n 1 0.450 0.224  2.18  -0.739\n 2 0.507 0.123 -1.82  -0.113\n 3 0.423 0      0.210 -0.200\n 4 1     0.567 -1.01  -0.616\n 5 0.751 0.268 -0.360  0.164\n 6 0.577 0.319 -1.13   0.685\n 7 0.320 1     -1.06   1.36 \n 8 0     0.547 -0.671 -0.836\n 9 0.322 0.565  0.765 -0.655\n10 0.289 0.179  0.123 -0.955\n\ndf2 <- df\n\n\n# What if we're only going to run a function once? Answer: Anonymous functions\ndf %>%\n  modify(function(x) x+2)\n\n\n# A tibble: 10 x 4\n       a     b     c     d\n   <dbl> <dbl> <dbl> <dbl>\n 1  2.64  1.71 4.18   1.26\n 2  2.83  1.42 0.178  1.89\n 3  2.56  1.06 2.21   1.80\n 4  4.43  2.71 0.995  1.38\n 5  3.62  1.84 1.64   2.16\n 6  3.05  1.99 0.872  2.69\n 7  2.22  3.96 0.937  3.36\n 8  1.18  2.65 1.33   1.16\n 9  2.23  2.70 2.77   1.34\n10  2.12  1.58 2.12   1.05\n\n#shortcuts from purrr\ndf %>%\n  modify(~ . + 2)\n\n\n# A tibble: 10 x 4\n       a     b     c     d\n   <dbl> <dbl> <dbl> <dbl>\n 1  2.64  1.71 4.18   1.26\n 2  2.83  1.42 0.178  1.89\n 3  2.56  1.06 2.21   1.80\n 4  4.43  2.71 0.995  1.38\n 5  3.62  1.84 1.64   2.16\n 6  3.05  1.99 0.872  2.69\n 7  2.22  3.96 0.937  3.36\n 8  1.18  2.65 1.33   1.16\n 9  2.23  2.70 2.77   1.34\n10  2.12  1.58 2.12   1.05\n\n# So why are maps powerful with functions. Answer: pipe stuff\ndf %>% \n  mutate(e = c(rep(\"dude\", 5), rep(\"sweet\", 5))) %>%\n  split(.$e) %>%\n  map(~ lm(a ~ b, data =.)) %>%\n  map(summary) %>%\n  map_dbl(\"r.squared\")\n\n\n      dude      sweet \n0.84405175 0.03733455 \n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-11-07T03:28:59-08:00",
    "input_file": "purrrfect.knit.md"
  }
]
